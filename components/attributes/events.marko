style {
  .person-item {
    border-bottom: 1px solid #CCCCCC;
    display: flex;
    padding: 0.3rem;
  }

  .person-item .name,
  .person-item .age,
  .person-item .actions {
    flex: 1;
  }
}

/**
* Demonstrates events and parent-child communication
* accepts `moveUp` and `moveDown` events from ./components/person-item.marko
*/
class {
  onCreate() {
    this.state = {
      items: [
        {name: 'George', age: 31, order: 0},
        {name: 'Barb', age: 28, order: 1},
        {name: 'Helen', age: 22, order: 2},
        {name: 'Andrew', age: 40, order: 3},
        {name: 'Millie', age: 24, order: 4}
      ]
    };
  }

  reorderItems() {
    this.state.items.sort(function (a, b) {
      return a.order > b.order;
    });

    this.state.items = this.state.items.map(function (item, index) {
      item.order = index;
      return item;
    });
  }

  moveItemUp(item, index) {
    item.order -= 2;
    this.state.items[index] == item;
    this.reorderItems();
  }

  moveItemDown(item, index) {
    item.order += 2;
    this.state.items[index] == item;
    this.reorderItems();
  }
}

<div class="people-list">
  <h3>People</h3>
  <p>
    Click ↑ or ↓ to sort.
  </p>
  <for(itemIndex, item in state.items)>
    <!--
    setup event handlers so it can
    receive `moveUp` and `moveDown`
    from the child
    -->
    <person-item person=item
      index=itemIndex
      max=(state.items.length - 1)
      on-moveUp('moveItemUp')
      on-moveDown('moveItemDown')/>
  </for>
</div>
